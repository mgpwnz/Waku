#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Directory for user config and keystore
CONFIG_DIR="$HOME/.waku"
ENV_FILE="$CONFIG_DIR/.env"

# Compose project directories
COMPOSE_DIR="$HOME/nwaku-compose"
KEYSTORE_DIR="$COMPOSE_DIR/keystore"
EXAMPLE_ENV="$COMPOSE_DIR/.env.example"
TARGET_ENV="$COMPOSE_DIR/.env"

# Default keystore.json path inside CONFIG_DIR
DEFAULT_KEYSTORE_FILE="$CONFIG_DIR/keystore.json"

# Ensure user config directory exists
mkdir -p "$CONFIG_DIR"

config() {
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ENV_FILE
  if [[ ! -f "$ENV_FILE" ]]; then
    echo "–§–∞–π–ª $ENV_FILE –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ 'Create the configuration'."
    return 1
  fi
  source "$ENV_FILE"

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  for var in private_key public_key LineaS_RPC PASS KEYSTORE_FILE; do
    if [[ -z "${!var:-}" ]]; then
      echo "–ó–º—ñ–Ω–Ω–∞ $var –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ $ENV_FILE."
      return 1
    fi
  done

  # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä .env –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
  cp "$EXAMPLE_ENV" "$TARGET_ENV"

  # –°–æ–∑–¥–∞–µ–º keystore-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  mkdir -p "$KEYSTORE_DIR"

  # –ö–æ–ø–∏—Ä—É–µ–º keystore.json –∏–∑ CONFIG_DIR
  if [[ ! -f "$KEYSTORE_FILE" ]]; then
    echo "–§–∞–π–ª keystore –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º $KEYSTORE_FILE"
    return 1
  fi
  cp "$KEYSTORE_FILE" "$KEYSTORE_DIR/keystore.json"
  chmod 600 "$KEYSTORE_DIR/keystore.json"

  # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ .env
  sed -i -e "s%RLN_RELAY_ETH_CLIENT_ADDRESS=.*%RLN_RELAY_ETH_CLIENT_ADDRESS=${LineaS_RPC}%g" "$TARGET_ENV"
  sed -i -e "s%ETH_TESTNET_ACCOUNT=.*%ETH_TESTNET_ACCOUNT=${public_key}%g"             "$TARGET_ENV"
  sed -i -e "s%ETH_TESTNET_KEY=.*%ETH_TESTNET_KEY=${private_key}%g"                   "$TARGET_ENV"
  sed -i -e "s%RLN_RELAY_CRED_PASSWORD=.*%RLN_RELAY_CRED_PASSWORD=${PASS}%g"         "$TARGET_ENV"
  sed -i -e "s%STORAGE_SIZE=.*%STORAGE_SIZE=30720MB%g"                               "$TARGET_ENV"
  grep -q '^POSTGRES_SHM=' "$TARGET_ENV" || echo 'POSTGRES_SHM=2g' >> "$TARGET_ENV"

  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ docker-compose.yml
  sed -i 's/0\.0\.0\.0:3000:3000/0.0.0.0:3003:3000/' "$COMPOSE_DIR/docker-compose.yml"
  sed -i 's/80:80/82:80/'                               "$COMPOSE_DIR/docker-compose.yml"
}

while true; do
  PS3='Select an action: '
  options=(
    "Docker"
    "Download the components"
    "Create the configuration"
    "Run Node"
    "Update Node"
    "Check health"
    "Logs"
    "Uninstall"
    "Exit"
  )
  select opt in "${options[@]}"; do
    case $opt in

      "Docker")
        if ! . <(wget -qO- https://raw.githubusercontent.com/mgpwnz/VS/main/docker.sh); then
          echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ docker.sh"
        fi
        break
        ;;

      "Download the components")
        if [[ ! -d "$COMPOSE_DIR" ]]; then
          git clone https://github.com/waku-org/nwaku-compose "$COMPOSE_DIR"
        else
          echo "–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —É–∂–µ —ñ—Å–Ω—É—î ‚Äî –æ–Ω–æ–≤–ª—é—é..."
          git -C "$COMPOSE_DIR" pull
        fi
        break
        ;;

      "Create the configuration")
        mkdir -p "$CONFIG_DIR"
        touch "$ENV_FILE"
        source "$ENV_FILE" 2>/dev/null || true

        # –°–±–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if [[ -z "${private_key:-}" ]]; then
          read -rp "Enter your private key: " private_key
          echo "private_key=\"$private_key\"" >> "$ENV_FILE"
        fi
        if [[ -z "${public_key:-}" ]]; then
          read -rp "Enter your public key: " public_key
          echo "public_key=\"$public_key\"" >> "$ENV_FILE"
        fi
        if [[ -z "${LineaS_RPC:-}" ]]; then
          read -rp "üåê Linea Sepolia RPC URL: " LineaS_RPC
          echo "LineaS_RPC=\"$LineaS_RPC\"" >> "$ENV_FILE"
        fi
        if [[ -z "${PASS:-}" ]]; then
          read -rp "Enter password üîë: " PASS
          echo "PASS=\"$PASS\"" >> "$ENV_FILE"
        fi

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ KEYSTORE_FILE
        if [[ -z "${KEYSTORE_FILE:-}" ]]; then
          if [[ -f "$DEFAULT_KEYSTORE_FILE" ]]; then
            KEYSTORE_FILE="$DEFAULT_KEYSTORE_FILE"
            echo "KEYSTORE_FILE=\"$KEYSTORE_FILE\"" >> "$ENV_FILE"
          else
            read -rp "Enter path to keystore.json (–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ SFTP –≤ $CONFIG_DIR): " KEYSTORE_FILE
            echo "KEYSTORE_FILE=\"$KEYSTORE_FILE\"" >> "$ENV_FILE"
          fi
        fi

        break
        ;;

      "Run Node")
        if ! config; then
          echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—é—Å—è –≤ –º–µ–Ω—é."
          continue
        fi
        cd "$COMPOSE_DIR"
        docker compose up -d
        docker compose logs -f
        break
        ;;

      "Update Node")
        cd "$COMPOSE_DIR"
        docker compose down
        git fetch && git stash && git merge origin/master && git stash pop
        rm -f .env
        if ! config; then
          echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è."
          continue
        fi
        docker compose up -d
        break
        ;;

      "Check health")
        bash "$COMPOSE_DIR/chkhealth.sh"
        break
        ;;

      "Logs")
        docker compose -f "$COMPOSE_DIR/docker-compose.yml" logs -f --tail 1000
        break
        ;;

      "Uninstall")
        if [[ -d "$COMPOSE_DIR" ]]; then
          read -rp "Wipe all DATA? [y/N] " response
          if [[ "$response" =~ ^[Yy] ]]; then
            cd "$COMPOSE_DIR" && docker compose down -v
            rm -rf "$COMPOSE_DIR"
          else
            echo "Canceled"
          fi
        fi
        break
        ;;

      "Exit")
        exit 0
        ;;

      *) echo "invalid option $REPLY";;
    esac
  done
done
